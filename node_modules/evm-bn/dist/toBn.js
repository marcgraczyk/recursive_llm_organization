"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toBn = void 0;
const bignumber_1 = require("@ethersproject/bignumber");
const from_exponential_1 = __importDefault(require("from-exponential"));
/**
 * Convert a stringified fixed-point number to a big number with a custom number of decimals.
 *
 * @remarks
 * - Accepts scientific notation.
 * - Checks are in place to adhere to the numerical constraints of the EVM.
 */
function toBn(x, decimals = 18) {
    if (x === undefined || typeof x !== "string") {
        throw new Error("Input must be a string");
    }
    if (decimals < 1 || decimals > 77) {
        throw new Error("Decimals must be between 1 and 77");
    }
    let xs = x;
    // Convert from exponential notation.
    if (x.includes("e")) {
        xs = (0, from_exponential_1.default)(x);
    }
    // Limit the number of decimals to the value provided.
    if (xs.includes(".")) {
        const parts = xs.split(".");
        parts[1] = parts[1].slice(0, decimals);
        xs = parts[0] + "." + parts[1];
    }
    // Check if x is a whole number or a fixed-point number with some maximum number of decimals.
    const digits = 78 - decimals;
    const regexp = new RegExp(`^[-+]?(\\d{1,${digits}}|(?=\\d+\\.\\d+)\\d{1,${digits}}\\.\\d{1,${decimals}})$`);
    if (regexp.test(xs)) {
        return (0, bignumber_1.parseFixed)(xs, decimals);
    }
    else {
        throw new Error("Unknown format for fixed-point number: " + x);
    }
}
exports.toBn = toBn;
//# sourceMappingURL=toBn.js.map